package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Class with methods to manipulate Living_Facility database.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Living {

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A method to add a person to the Living_Facility database. This works with the Properties database, if the value is false
     * it will update to true for having the facility
     *
     * @param int propertyID, the ID of the property
     * @param boolean centralHeating, if the property has centralHeating
     * @param boolean washingMachine, if the property has a washing maching
     * @param boolean dryingMachine, if the property has drier
     * @param boolean fireExtinguisher, if the property has a fire extinguisher
     * @param boolean smokeAlarm, if the property has a smoke alarm
     * @param boolean firstAidKit, if the property has a first aid kit
     */
	public static void addLiving(int propertyID, boolean wifi, boolean television, boolean satellite, boolean streaming, boolean dvdPlayer,
			boolean boardgames) throws Exception {
		
		if (!Properties.hasLiving(propertyID)) {
			Properties.editProperty(propertyID, "hasLiving", "1");;
		} else {
			Living.deleteLiving(propertyID);
		}
		Connection con = DBAccess.connect();
		String query = "INSERT INTO Living_Facility (propertyID,wifi,television,satellite,streaming,dvdPlayer,boardgames) "
				+ "VALUES ('" + propertyID + "','" + toTinyInt(wifi) + "','" + toTinyInt(television) + "','" + toTinyInt(satellite) + "','" + toTinyInt(streaming) +
				"','" + toTinyInt(dvdPlayer) + "','" + toTinyInt(boardgames) + "')";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Living Facilities have been added to property " + propertyID);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		DBAccess.disconnect();
	}
	
	/**
     * A method to edit the details of a living facility
     *
     * @param int property ID, the facilities property
     * @param String columnName, the feature to be updated
     * @param boolean newValue, the new value for the feature
     */
	public static void editLiving(int propertyID, String columnName, boolean newValue) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Living_Facility SET " + columnName + "='" + toTinyInt(newValue) + "' WHERE propertyID ='" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Property " + propertyID + "'s living facility details " + columnName + " has been updated to " + newValue);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A method for deleting a living facility according to the property ID
     *
     * @param int propertyID, the ID's property
     */
	public static void deleteLiving(int propertyID) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Living_Facility WHERE propertyID = '" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Living Facilities for property " + propertyID + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A 'get' method for retrieving the full description of each living in the database
	 * @return 
     *
     * @return boolean toReturn, true if property has central heating
     */
	public static void getAllLivings() {
		
		List<String> toReturn = new ArrayList<>();
		String query = "SELECT * FROM Living_Facility";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int wifi = rs.getInt("wifi");
				int television = rs.getInt("television");
				int satellite = rs.getInt("satellite");
				int streaming = rs.getInt("streaming");
				int dvdPlayer = rs.getInt("dvdPlayer");
				int boardgames = rs.getInt("boardgames");
				
				String toAdd = "Living facilities for property " + ID + " are as follows: ";
				String refigIncluded = "";
				if (wifi == 1) {
					refigIncluded = "Wifi Included";
				} else {
					refigIncluded = "Wifi not Included";
				}
				String televisionIncluded = "";
				if (television == 1) {
					televisionIncluded = "Television Included";
				} else {
					televisionIncluded = "Television not Included";
				}
				String satelliteIncluded = "";
				if (satellite == 1) {
					satelliteIncluded = "Satellite Included";
				} else {
					satelliteIncluded = "Satellite not Included";
				}
				String streamingIncluded = "";
				if (streaming == 1) {
					streamingIncluded = "Streaming Included";
				} else {
					streamingIncluded = "Streaming not Included";
				}
				String dvdPlayerIncluded = "";
				if (dvdPlayer == 1) {
					dvdPlayerIncluded = "DvdPlayer Included";
				} else {
					dvdPlayerIncluded = "DvdPlayer not Included";
				}
				String boardgamesIncluded = "";
				if (boardgames == 1) {
					boardgamesIncluded = "Boardgames Included";
				} else {
					boardgamesIncluded = "Boardgames not Included";
				}
				toReturn.add(toAdd + dvdPlayerIncluded + ", " +
				televisionIncluded + ", " + satelliteIncluded + ", " + refigIncluded + ", " + streamingIncluded + ", " + boardgamesIncluded);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A 'get' method for retrieving the full description a properties utilities in the database
     *
     *@param propertyID, the properties ID
     * @return boolean toReturn, the string containing the description of a properties utilities
     */
	public static String getLiving(int propertyID) {
		
		
		String toReturn = "";
		String query = "SELECT * FROM Living_Facility";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int wifi = rs.getInt("wifi");
				int television = rs.getInt("television");
				int satellite = rs.getInt("satellite");
				int streaming = rs.getInt("streaming");
				int dvdPlayer = rs.getInt("dvdPlayer");
				int boardgames = rs.getInt("boardgames");
				
				String toAdd = "Living facilities for property " + ID + " are as follows: ";
				String refigIncluded = "";
				if (wifi == 1) {
					refigIncluded = "Wifi Included";
				} else {
					refigIncluded = "Wifi not Included";
				}
				String televisionIncluded = "";
				if (television == 1) {
					televisionIncluded = "Television Included";
				} else {
					televisionIncluded = "Television not Included";
				}
				String satelliteIncluded = "";
				if (satellite == 1) {
					satelliteIncluded = "Satellite Included";
				} else {
					satelliteIncluded = "Satellite not Included";
				}
				String streamingIncluded = "";
				if (streaming == 1) {
					streamingIncluded = "Streaming Included";
				} else {
					streamingIncluded = "Streaming not Included";
				}
				String dvdPlayerIncluded = "";
				if (dvdPlayer == 1) {
					dvdPlayerIncluded = "DvdPlayer Included";
				} else {
					dvdPlayerIncluded = "DvdPlayer not Included";
				}
				String boardgamesIncluded = "";
				if (boardgames == 1) {
					boardgamesIncluded = "Boardgames Included";
				} else {
					boardgamesIncluded = "Boardgames not Included";
				}
				toReturn = toAdd + dvdPlayerIncluded + ", " +
				televisionIncluded + ", " + satelliteIncluded + ", " + refigIncluded + ", " + streamingIncluded + ", " + boardgamesIncluded;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a wifi
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a wifi
     */
	public static boolean getWifi(int propertyID) {
		
		String query = "SELECT wifi FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("wifi");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a television
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a television
     */
	public static boolean getTelevision(int propertyID) {
		
		String query = "SELECT television FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("television");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has an satellite
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has an satellite
     */
	public static boolean getSatellite(int propertyID) {
		
		String query = "SELECT satellite FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("satellite");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a streaming
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a streaming
     */
	public static boolean getStreaming(int propertyID) {
		
		String query = "SELECT streaming FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("streaming");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a dvdPlayer
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a dvdPlayer
     */
	public static boolean getDvdPlayer(int propertyID) {
		
		String query = "SELECT dvdPlayer FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("dvdPlayer");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has boardgames
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has boardgames
     */
	public static boolean getBoardGames(int propertyID) {
		
		String query = "SELECT boardGames FROM Living_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("boardGames");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A method to change a boolean value to a tiny int, to avoid confusion when adding properties
     *
     * @param boolean i, the boolean to be converted
     * @return toReturn, corresponding value of 1 (true) or 0 (false)
     */
	public static int toTinyInt(boolean i) throws IllegalArgumentException {
		if (!(i == true || i == false)) {throw new IllegalArgumentException("Value must be true or false");}
		int toReturn = 0;
		if (i == true) {
			return 1;
		}
		return toReturn;
	}
	
	/**
     * method to change an int to a boolean value, to avoid confusion again and to use in methods
     *
     * @param int i, to be converted
     * @return toReturn, corresponding value of true (1) or false (0)
     */
	public static boolean toBoolean(int i) throws IllegalArgumentException {
		if (!(i == 1 || i == 0)) {throw new IllegalArgumentException("Value must be 1 or 0");}
		boolean toReturn = false;
		if (i == 1) {
			return true;
		}
		return toReturn;
	}
	
	
	
	//This main method is just to demonstrate how everything works :)
		public static void main(String[] args) throws Exception {
			//Living.deleteLiving(16);
			Living.addLiving(16, false, false, false, true, false, false);
			System.out.println(Living.getStreaming(16));
			System.out.print(Living.getLiving(16));
			//System.out.println(Living.getBoardGames(16));
			//System.out.print(Living.getLiving(16));
			//Living.editLiving(16, "boardGames", true);
			//System.out.println(Living.getBoardGames(16));
			//System.out.print(Living.getLiving(16));

		}
	
}
