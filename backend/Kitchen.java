package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Class with methods to manipulate Kitchen_Facility database.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Kitchen {

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A method to add a person to the Kitchen_Facility database. This works with the Properties database, if the value is false
     * it will update to true for having the facility
     *
     * @param int propertyID, the ID of the property
     * @param boolean centralHeating, if the property has centralHeating
     * @param boolean washingMachine, if the property has a washing maching
     * @param boolean dryingMachine, if the property has drier
     * @param boolean fireExtinguisher, if the property has a fire extinguisher
     * @param boolean smokeAlarm, if the property has a smoke alarm
     * @param boolean firstAidKit, if the property has a first aid kit
     */
	public static void addKitchen(int propertyID, boolean refrigerator, boolean microwave, boolean oven, boolean stove, boolean dishwasher,
			boolean tableware, boolean cookware, boolean basicProvision) throws Exception {
		
		if (!Properties.hasKitchen(propertyID)) {
			Properties.editProperty(propertyID, "hasKitchen", "1");;
		}  else {
			Kitchen.deleteKitchen(propertyID);
		}
		Connection con = DBAccess.connect();
		String query = "INSERT INTO Kitchen_Facility (propertyID,refrigerator,microwave,oven,stove,dishwasher,tableware,cookware,basicProvision) "
				+ "VALUES ('" + propertyID + "','" + toTinyInt(refrigerator) + "','" + toTinyInt(microwave) + "','" + toTinyInt(oven) + "','" + toTinyInt(stove) +
				"','" + toTinyInt(dishwasher) + "','" + toTinyInt(tableware) + "','" + toTinyInt(cookware) + "','" + toTinyInt(basicProvision) + "')";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Kitchen Facilities have been added to property " + propertyID);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		DBAccess.disconnect();
	}
	
	/**
     * A method to edit the details of a kitchen facility
     *
     * @param int property ID, the facilities property
     * @param String columnName, the feature to be updated
     * @param boolean newValue, the new value for the feature
     */
	public static void editLiving(int propertyID, String columnName, boolean newValue) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Kitchen_Facility SET " + columnName + "='" + toTinyInt(newValue) + "' WHERE propertyID ='" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Property " + propertyID + "'s kitchen facility details " + columnName + " has been updated to " + newValue);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A method for deleting a kitchen facility according to the property ID
     *
     * @param int propertyID, the ID's property
     */
	public static void deleteKitchen(int propertyID) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Kitchen_Facility WHERE propertyID = '" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Kitchen Facilities for property " + propertyID + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A 'get' method for retrieving the full description of each kitchen in the database
	 * @return 
     *
     * @return boolean toReturn, true if property has central heating
     */
	public static List<String> getAllKitchens() {
		
		List<String> toReturn = new ArrayList<>();
		String query = "SELECT * FROM Kitchen_Facility";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int refrigerator = rs.getInt("refrigerator");
				int microwave = rs.getInt("microwave");
				int oven = rs.getInt("oven");
				int stove = rs.getInt("stove");
				int dishwasher = rs.getInt("dishwasher");
				int tableware = rs.getInt("tableware");
				int cookware = rs.getInt("cookware");
				int basicProvision = rs.getInt("basicProvision");
				
				String toAdd = "Kitchen facilities for property " + ID + " are as follows: ";
				String refigIncluded = "";
				if (refrigerator == 1) {
					refigIncluded = "Refrigerator Included";
				} else {
					refigIncluded = "Refrigerator not Included";
				}
				String microwaveIncluded = "";
				if (microwave == 1) {
					microwaveIncluded = "Microwave Included";
				} else {
					microwaveIncluded = "Microwave not Included";
				}
				String ovenIncluded = "";
				if (oven == 1) {
					ovenIncluded = "Oven Included";
				} else {
					ovenIncluded = "Oven not Included";
				}
				String stoveIncluded = "";
				if (stove == 1) {
					stoveIncluded = "Stove Included";
				} else {
					stoveIncluded = "Stove not Included";
				}
				String dishwasherIncluded = "";
				if (dishwasher == 1) {
					dishwasherIncluded = "Dishwasher Included";
				} else {
					dishwasherIncluded = "Dishwasher not Included";
				}
				String tablewareIncluded = "";
				if (tableware == 1) {
					tablewareIncluded = "Tableware Included";
				} else {
					tablewareIncluded = "Tableware not Included";
				}
				String cookwareIncluded = "";
				if (cookware == 1) {
					cookwareIncluded = "Cookware Included";
				} else {
					cookwareIncluded = "Cookware not Included";
				}
				String basicIncluded = "";
				if (basicProvision == 1) {
					basicIncluded = "Basic Provision Included";
				} else {
					basicIncluded = "Basic Provision not Included";
				}
				toReturn.add(toAdd + basicIncluded + ", " + cookwareIncluded + ", " + dishwasherIncluded + ", " +
				microwaveIncluded + ", " + ovenIncluded + ", " + refigIncluded + ", " + stoveIncluded + ", " + tablewareIncluded);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
		
	}
	
	/**
     * A 'get' method for retrieving the full description a properties utilities in the database
     *
     *@param propertyID, the properties ID
     * @return boolean toReturn, the string containing the description of a properties utilities
     */
	public static String getKitchen(int propertyID) {
		
		String toReturn = "";
		String query = "SELECT * FROM Kitchen_Facility WHERE propertyID = '" + propertyID + "'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int refrigerator = rs.getInt("refrigerator");
				int microwave = rs.getInt("microwave");
				int oven = rs.getInt("oven");
				int stove = rs.getInt("stove");
				int dishwasher = rs.getInt("dishwasher");
				int tableware = rs.getInt("tableware");
				int cookware = rs.getInt("cookware");
				int basicProvision = rs.getInt("basicProvision");
				
				String toAdd = "Kitchen Facilities for property " + ID + " are as follows: ";
				String refigIncluded = "";
				if (refrigerator == 1) {
					refigIncluded = "Refrigerator Included";
				} else {
					refigIncluded = "Refrigerator not Included";
				}
				String microwaveIncluded = "";
				if (microwave == 1) {
					microwaveIncluded = "Microwave Included";
				} else {
					microwaveIncluded = "Microwave not Included";
				}
				String ovenIncluded = "";
				if (oven == 1) {
					ovenIncluded = "Oven Included";
				} else {
					ovenIncluded = "Oven not Included";
				}
				String stoveIncluded = "";
				if (stove == 1) {
					stoveIncluded = "Stove Included";
				} else {
					stoveIncluded = "Stove not Included";
				}
				String dishwasherIncluded = "";
				if (dishwasher == 1) {
					dishwasherIncluded = "Dishwasher Included";
				} else {
					dishwasherIncluded = "Dishwasher not Included";
				}
				String tablewareIncluded = "";
				if (tableware == 1) {
					tablewareIncluded = "Tableware Included";
				} else {
					tablewareIncluded = "Tableware not Included";
				}
				String cookwareIncluded = "";
				if (cookware == 1) {
					cookwareIncluded = "Cookware Included";
				} else {
					cookwareIncluded = "Cookware not Included";
				}
				String basicIncluded = "";
				if (basicProvision == 1) {
					basicIncluded = "Basic Provision Included";
				} else {
					basicIncluded = "Basic Provision not Included";
				}
				toReturn = toAdd + basicIncluded + ", " + cookwareIncluded + ", " + dishwasherIncluded + ", " +
				microwaveIncluded + ", " + ovenIncluded + ", " + refigIncluded + ", " + stoveIncluded + ", " + tablewareIncluded;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for retrieving if the property has a refrigerator
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a refrigerator
     */
	public static boolean getRefrigerator(int propertyID) {
		
		String query = "SELECT refrigerator FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("refrigerator");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a microwave
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a microwave
     */
	public static boolean getMicrowave(int propertyID) {
		
		String query = "SELECT microwave FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("microwave");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has an oven
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has an oven
     */
	public static boolean getOven(int propertyID) {
		
		String query = "SELECT oven FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("oven");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a stove
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a stove
     */
	public static boolean getStove(int propertyID) {
		
		String query = "SELECT stove FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("stove");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a dishwasher
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a dishwasher
     */
	public static boolean getDishwasher(int propertyID) {
		
		String query = "SELECT dishwasher FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("dishwasher");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has tableware
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has tableware
     */
	public static boolean getTableware(int propertyID) {
		
		String query = "SELECT tableware FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("tableware");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has cookware
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has an cookware
     */
	public static boolean getCookware(int propertyID) {
		
		String query = "SELECT cookware FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("cookware");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has basic provisions
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has basic provisions
     */
	public static boolean getBasicProvisions(int propertyID) {
		
		String query = "SELECT basicProvision FROM Kitchen_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("basicProvision");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}

	
	/**
     * A method to change a boolean value to a tiny int, to avoid confusion when adding properties
     *
     * @param boolean i, the boolean to be converted
     * @return toReturn, corresponding value of 1 (true) or 0 (false)
     */
	public static int toTinyInt(boolean i) throws IllegalArgumentException {
		if (!(i == true || i == false)) {throw new IllegalArgumentException("Value must be true or false");}
		int toReturn = 0;
		if (i == true) {
			return 1;
		}
		return toReturn;
	}
	
	/**
     * method to change an int to a boolean value, to avoid confusion again and to use in methods
     *
     * @param int i, to be converted
     * @return toReturn, corresponding value of true (1) or false (0)
     */
	public static boolean toBoolean(int i) throws IllegalArgumentException {
		if (!(i == 1 || i == 0)) {throw new IllegalArgumentException("Value must be 1 or 0");}
		boolean toReturn = false;
		if (i == 1) {
			return true;
		}
		return toReturn;
	}
	
}
