package backend;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.util.List;
import net.proteanit.sql.DbUtils;

public class Bookings {
	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
	 * This function add the requested booking into the database for the host to respond
	 * 
	 * @param propertyID = property id
	 * @param startDate  = guest requested start staying date
	 * @param endDate	 = guest requested end staying date
	 * @param guestID	 = guestID
	 * @throws Exception
	 */
	public static void addBooking(int propertyID, String startDate, String endDate, String guestID) throws Exception {
		Date start = Date.valueOf(startDate);
		Date end = Date.valueOf(endDate);
		int num = getLastestBookingID() + 1;
		Connection con = DBAccess.connect();
		
		String query = "INSERT INTO Bookings (bookingID, propertyID, startDate, endDate, guestID) VALUES( '" + num + "', '" 
				+ propertyID + "', '" + start + "', '" + end + "', '" 
				+ guestID + "')";
		System.out.println(query);
		try  {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Booking for " + propertyID + " between " 
					+ startDate + " and " + endDate +" from " + guestID 
					+ " is added." );
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param guestID
	 * @return a list of all bookings by the given column
	 */
	public static List <Integer> getBookingID(String columnName, String value) {
		
		Connection con = DBAccess.connect();
		
		List <Integer> listOfIDs = new ArrayList();
		String query = "SELECT bookingID FROM Bookings WHERE " + columnName + " = '"
				+ value +"'";
		
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int bookingid = rs.getInt("bookingID");
				listOfIDs.add(bookingid);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return listOfIDs;
	}
	
	/**
	 * Takes in an propertyID and the guestID, and find the booking ID
	 * @param propertyID
	 * @param guestID
	 * @return the one bookingID of a stay by the guest
	 */
	public static int getSelectedBookingID(int propertyID, String guestID) {
		int iD = 0;
		String query = "SELECT * FROM Bookings WHERE propertyID = '" + 
				+ propertyID +"' AND guestID = '" + guestID +"'";
		Connection con = DBAccess.connect();
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int bookingid = rs.getInt("bookingID");
				iD = bookingid;
			}
			
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return iD;
	}
	
	public static HashMap getSelectedBookingDates(int propertyID, String guestID) {
		HashMap details = new HashMap();
		String query = "SELECT * FROM Bookings WHERE propertyID = '" + 
				+ propertyID +"' AND guestID = '" + guestID +"'";
		Connection con = DBAccess.connect();
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				Date sd = rs.getDate("startDate");
				Date ed = rs.getDate("endDate");
				details.put("startDate", sd);
				details.put("endDate", ed);
			}
			
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return details;
	}
	
	/**
	 * Gets a bookingID then return the details of the booking
	 * @param bookingID
	 * @return a propertyID, startDate, endDate, guestID in a HashMap
	 */
	public static HashMap getBookingDetails(int bookingID) {

		Connection con = DBAccess.connect();
		
		HashMap details = new HashMap();
		String query = "SELECT * FROM Bookings WHERE bookingID = " + "'"
				+ bookingID +"'";
		
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				details.put("propertyID", rs.getInt("propertyID"));
				details.put("startDate", rs.getDate("startDate"));
				details.put("endDate", rs.getDate("endDate"));
				details.put("guestID", rs.getString("guestID"));
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return details;
	}
	
	/**
	 * getting the most recent booking ID number in the database
	 * @return the most recent booking ID number in the database
	 */
	public static int getLastestBookingID() {
		
		Connection con = DBAccess.connect();
		
		int initialID = 0;
		String query = "SELECT bookingID FROM Bookings";
		
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int idNum = rs.getInt("bookingID");
				if (initialID < idNum) {
					initialID = idNum;
				}
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return initialID;
	}
	
	/**
	 * Remove the particular booking from the database
	 * @param bookingID
	 * @throws Exception
	 */
	public static void deleteBooking(int bookingID) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Bookings WHERE bookingID = '" + bookingID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Booking " + bookingID + " has been deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
	 * Remove the particular booking from the database
	 * @param propertyID
	 * @throws Exception
	 */
	public static void deletePropertiesBookings(int propertyID) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Bookings WHERE propertyID = '" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Bookings for property " + propertyID + " has been deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	
	
}
