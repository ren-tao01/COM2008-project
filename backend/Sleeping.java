package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Class with methods to manipulate Sleeping_Facility database.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Sleeping {

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A method to add a person to the Sleeping_Facility database. This works with the Properties database, if the value is false
     * it will update to true for having the facility
     *
     * @param int propertyID, the ID of the property
     * @param boolean centralHeating, if the property has centralHeating
     * @param boolean washingMachine, if the property has a washing maching
     * @param boolean dryingMachine, if the property has drier
     * @param boolean fireExtinguisher, if the property has a fire extinguisher
     * @param boolean smokeAlarm, if the property has a smoke alarm
     * @param boolean firstAidKit, if the property has a first aid kit
     */
	public static void addSleeping(int propertyID, boolean bedLinen, boolean towels, boolean singleBed, boolean doubleBed, boolean kingSizedBed,
			boolean bunkBed) throws Exception {
		
		if (!Properties.hasSleeping(propertyID)) {
			Properties.editProperty(propertyID, "hasSleeping", "1");;
		}  else {
			Sleeping.deleteSleeping(propertyID);
		}
		Connection con = DBAccess.connect();
		String query = "INSERT INTO Sleeping_Facility (propertyID,bedLinen,towels,singleBed,doubleBed,kingSizedBed,bunkBed) "
				+ "VALUES ('" + propertyID + "','" + toTinyInt(bedLinen) + "','" + toTinyInt(towels) + "','" + toTinyInt(singleBed) + "','" + toTinyInt(doubleBed) +
				"','" + toTinyInt(kingSizedBed) + "','" + toTinyInt(bunkBed) + "')";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Sleeping Facilities have been added to property " + propertyID);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		DBAccess.disconnect();
	}
	
	/**
     * A method to edit the details of a sleeping facility
     *
     * @param int property ID, the facilities property
     * @param String columnName, the feature to be updated
     * @param boolean newValue, the new value for the feature
     */
	public static void editSleeping(int propertyID, String columnName, boolean newValue) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Sleeping_Facility SET " + columnName + "='" + toTinyInt(newValue) + "' WHERE propertyID ='" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Property " + propertyID + "'s sleeping facility details " + columnName + " has been updated to " + newValue);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A method for deleting a sleeping facility according to the property ID
     *
     * @param int propertyID, the ID's property
     */
	public static void deleteSleeping(int propertyID) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Sleeping_Facility WHERE propertyID = '" + propertyID + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Sleeping Facilities for property " + propertyID + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A 'get' method for retrieving the full description of each sleeping in the database
	 * @return 
     *
     * @return List<String> toReturn, list of all sleeping facilities
     */
	public static void getAllSleepings() {
		
		List<String> toReturn = new ArrayList<>();
		String query = "SELECT * FROM Sleeping_Facility";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int bedLinen = rs.getInt("bedLinen");
				int towels = rs.getInt("towels");
				int singleBed = rs.getInt("singleBed");
				int doubleBed = rs.getInt("doubleBed");
				int kingSizedBed = rs.getInt("kingSizedBed");
				int boardgames = rs.getInt("bunkBed");
				
				String toAdd = "Sleeping facilities for property " + ID + " are as follows: ";
				String bedLinIncluded = "";
				if (bedLinen == 1) {
					bedLinIncluded = "Bed Linen Included";
				} else {
					bedLinIncluded = "Bed Linen not Included";
				}
				String towelsIncluded = "";
				if (towels == 1) {
					towelsIncluded = "Towels Included";
				} else {
					towelsIncluded = "Towels not Included";
				}
				String singleBedIncluded = "";
				if (singleBed == 1) {
					singleBedIncluded = "Single Bed Included";
				} else {
					singleBedIncluded = "Single Bed not Included";
				}
				String doubleBedIncluded = "";
				if (doubleBed == 1) {
					doubleBedIncluded = "Double Bed Included";
				} else {
					doubleBedIncluded = "Double Bed not Included";
				}
				String kingSizedBedIncluded = "";
				if (kingSizedBed == 1) {
					kingSizedBedIncluded = "King Sized Bed Included";
				} else {
					kingSizedBedIncluded = "King Sized Bed not Included";
				}
				String bunkBedIncluded = "";
				if (boardgames == 1) {
					bunkBedIncluded = "Bunk Bed Included";
				} else {
					bunkBedIncluded = "Bunk Bed not Included";
				}
				toReturn.add(toAdd + kingSizedBedIncluded + ", " +
				towelsIncluded + ", " + singleBedIncluded + ", " + bedLinIncluded + ", " + doubleBedIncluded + ", " + bunkBedIncluded);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A 'get' method for retrieving the full description a properties utilities in the database
     *
     *@param propertyID, the properties ID
     * @return String toReturn, the string containing the description of a properties sleeping facilities
     */
	public static String getSleeping(int propertyID) {
		
		
		String toReturn = "";
		String query = "SELECT * FROM Sleeping_Facility";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int ID = rs.getInt("propertyID");
				int bedLinen = rs.getInt("bedLinen");
				int towels = rs.getInt("towels");
				int singleBed = rs.getInt("singleBed");
				int doubleBed = rs.getInt("doubleBed");
				int kingSizedBed = rs.getInt("kingSizedBed");
				int boardgames = rs.getInt("boardgames");
				
				String toAdd = "Sleeping facilities for property " + ID + " are as follows: ";
				String bedLinIncluded = "";
				if (bedLinen == 1) {
					bedLinIncluded = "Bed Linen Included";
				} else {
					bedLinIncluded = "Bed Linen not Included";
				}
				String towelsIncluded = "";
				if (towels == 1) {
					towelsIncluded = "Towels Included";
				} else {
					towelsIncluded = "Towels not Included";
				}
				String singleBedIncluded = "";
				if (singleBed == 1) {
					singleBedIncluded = "Single Bed Included";
				} else {
					singleBedIncluded = "Single Bed not Included";
				}
				String doubleBedIncluded = "";
				if (doubleBed == 1) {
					doubleBedIncluded = "Double Bed Included";
				} else {
					doubleBedIncluded = "Double Bed not Included";
				}
				String kingSizedBedIncluded = "";
				if (kingSizedBed == 1) {
					kingSizedBedIncluded = "King Sized Bed Included";
				} else {
					kingSizedBedIncluded = "King Sized Bed not Included";
				}
				String bunkBedIncluded = "";
				if (boardgames == 1) {
					bunkBedIncluded = "Bunk Bed Included";
				} else {
					bunkBedIncluded = "Bunk Bed not Included";
				}
				toReturn = toAdd + kingSizedBedIncluded + ", " +
				towelsIncluded + ", " + singleBedIncluded + ", " + bedLinIncluded + ", " + doubleBedIncluded + ", " + bunkBedIncluded;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a bedLinen
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a bedLinen
     */
	public static boolean getBedLinen(int propertyID) {
		
		String query = "SELECT bedLinen FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("bedLinen");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a towels
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a towels
     */
	public static boolean getTowels(int propertyID) {
		
		String query = "SELECT towels FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("towels");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has an singleBed
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has an singleBed
     */
	public static boolean getSingleBed(int propertyID) {
		
		String query = "SELECT singleBed FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("singleBed");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a doubleBed
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a doubleBed
     */
	public static boolean getDoubleBed(int propertyID) {
		
		String query = "SELECT doubleBed FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("doubleBed");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a kingSizedBed
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a kingSizedBed
     */
	public static boolean getKingSizedBed(int propertyID) {
		
		String query = "SELECT kingSizedBed FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("kingSizedBed");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A 'get' method for retrieving if the property has a bunkBed
     *
     * @param int propertyID, the properties specific ID
     * @return boolean toReturn, true if property has a bunkBed
     */
	public static boolean getBunkBed(int propertyID) {
		
		String query = "SELECT bunkBed FROM Sleeping_Facility" + " WHERE propertyID = '" + propertyID + "'";;
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int has = rs.getInt("bunkBed");
				return Properties.toBoolean(has);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A method to change a boolean value to a tiny int, to avoid confusion when adding properties
     *
     * @param boolean i, the boolean to be converted
     * @return toReturn, corresponding value of 1 (true) or 0 (false)
     */
	public static int toTinyInt(boolean i) throws IllegalArgumentException {
		if (!(i == true || i == false)) {throw new IllegalArgumentException("Value must be true or false");}
		int toReturn = 0;
		if (i == true) {
			return 1;
		}
		return toReturn;
	}
	
	/**
     * method to change an int to a boolean value, to avoid confusion again and to use in methods
     *
     * @param int i, to be converted
     * @return toReturn, corresponding value of true (1) or false (0)
     */
	public static boolean toBoolean(int i) throws IllegalArgumentException {
		if (!(i == 1 || i == 0)) {throw new IllegalArgumentException("Value must be 1 or 0");}
		boolean toReturn = false;
		if (i == 1) {
			return true;
		}
		return toReturn;
	}
	
}
