package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Class for manipulation of Host database.
 * Methods deleteHost() etc are to be used in Person methods when a Person is deleted.
 * Also contains get methods and other methods what may be needed for Host database manipulation/
 * retrieving data
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Host extends Person{

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A method for adding a host. NOT TO BE USED, it is used in the add person if their
     * account type is host. Automatically assigns superhost status as false and numProperties
     * as 0.
     *
     * @param String email, the persons email
     */
	public static void addHost(String email) {
		Connection con = DBAccess.connect();
		int numProperties = 0;
		int superHost = 0;
		String query = "INSERT INTO Host (email,numProperties, superHost) "
				+ "VALUES ('" + email + "','" + numProperties + "','" + superHost +"')";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Host " + email + " added.");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	}

	
	/**
     * A void method to print all the hosts and their details from Person database.
     *
     */
	public static void viewHosts() {
		
		String query = "SELECT email, accountType, title, forname, surname, mobileNumber, password FROM Person WHERE accountType = 'HOST'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType");
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A void method to return all the hosts what have a certain feature assignment
     *
     * @param String columnName, the feature to search
     * @return String certainAssignment, the assigned value to search
     */
	public static void viewCertainHosts(String columnName, String certainAssignment) {
		
		String query = "SELECT email, accountType, title, forname, surname, mobileNumber, password FROM Person WHERE " + columnName + "= '" + certainAssignment + "' AND accountType = 'HOST'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		try  {
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType");
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				
				System.out.println("Showing persons where " + columnName + " is " + certainAssignment);
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A boolean 'get' method to see if a host is a super host.
     *
     * @param String email, the hosts ID.
     */
	public static boolean getSuperHostStatus(String email) {
		
		String query = "SELECT superHost FROM Host WHERE email = '" + email + "'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				int superHost = rs.getInt("superHost");
				if (superHost == 1) {
					return true;
				}
			}
			
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return false;
		
	}
	
	/**
     * A method to retrieve the number of properties a host has
     *
     * @param String email, the hosts ID.
     */
	public static int getNumProperties(String email) {
		
		String query = "SELECT * FROM Property WHERE hostID = '" + email + "'";
		Connection con = DBAccess.connect();
		int num = 0;
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				num ++;
			}
			
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return num;
		
	}
	
	/**
     * A method to update the number of properties for a host
     *
     * @param String email, the persons email
     */
	public static void updateNumProperties(String email) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Host SET numProperties='" + (getNumProperties(email)) + "' WHERE email ='" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Host " + email + "'s number of properties has been updated to " + getNumProperties(email));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A method to delete a guest from the guest database. NOT TO BE USED,
     * it is used in the deletePerson method.
     *
     * @param String email, the persons email
     */
	public static void deleteHost(String email) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Host WHERE email = '" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Host " + email + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		Properties.deleteHostsProperties(email);
	}
		
	//This main method is just to demonstrate how everything works :)
	public static void main(String[] args) throws Exception {

	}
	
}
