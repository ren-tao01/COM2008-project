package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Class for manipulation of Guest database.
 * Methods deleteGuest() etc are to be used in Person methods when a Person is deleted.
 * Also contains get methods and other methods what may be needed for Guest database manipulation/
 * retrieving data.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Guest extends Person {

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A method for adding a guest. NOT TO BE USED. This is used in the method for adding a Person.
     *
     * @param String email, the persons email
     */
	public static void addGuest(String email) {
		Connection con = DBAccess.connect();
		int numBookings = 0;
		String query = "INSERT INTO Guest (email,numBookings) "
				+ "VALUES ('" + email + "','" + numBookings + "')";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Guest " + email + " added.");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	}
	
	/**
     * A void method to print all guests and their details from the Person database.
     *
     * @param String email, the persons email
     * @return String accountType, the persons account type
     * @throws Illegal Argument Exception if a persons account type is not valid
     */
	public static void viewGuests() {
		
		String query = "SELECT email, accountType, title, forname, surname, mobileNumber, password FROM Person WHERE accountType = 'GUEST'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType");
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A void method to return all the guests what have a certain feature assignment
     *
     * @param String columnName, the feature to search
     * @return String certainAssignment, the assigned value to search
     */
	public static void viewCertainGuests(String columnName, String certainAssignment) {
		
		String query = "SELECT email, accountType, title, forname, surname, mobileNumber, password FROM Person WHERE " + columnName + "= '" + certainAssignment + "' AND accountType = 'GUEST'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType");
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				
				System.out.println("Showing persons where " + columnName + " is " + certainAssignment);
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A 'get' method for retrieving the amount of bookings made by a guest.
     *
     * @param String email, the persons email
     * @return int count, the amount of bookings made by a guest
     */
	public static int getNumBookings(String email) {
		
		String query = "SELECT * FROM Properties WHERE bookedBy = '" + email + "'";
		Connection con = DBAccess.connect();
		int count = 0;
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				count ++;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return count;
	}
	
	public static String getFullName(String columnName, String certainAssignment) {
		
		String query = "SELECT forname, surname FROM Person WHERE " + columnName + "= '" + certainAssignment + "' AND accountType = 'GUEST'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		String fullName = "";
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				
				fullName = firstName + " " + secondName;
				
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return fullName;
	}
	
	/**
     * A method to update the number of bookings for a guest
     *
     * @param String email, the persons email
     */
	public static void updateNumBookingsPerson(String email) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Guest SET numBookings='" + getNumBookings(email) + "' WHERE email ='" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Guest " + email + "'s number of bookings has been updated to " + getNumBookings(email));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	public static List viewRequestedBookings(String guestID) {
		
		String query = "SELECT * FROM Property" + " WHERE requestedBy LIKE '%" + guestID + "%'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		List result = new ArrayList();
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				HashMap dict = new HashMap();
				int ID = rs.getInt("propertyID");
				dict.put("propertyID", ID);
				String hostID = rs.getString("hostID");
				dict.put("hostID", hostID);
				String shortName = rs.getString("shortName");
				dict.put("shortName", shortName);
				String information = rs.getString("information");
				dict.put("information", information);
				int breakfast = rs.getInt("breakfast");
				dict.put("breakfast", breakfast);
				int houseNumber = rs.getInt("houseNumber");
				dict.put("houseNumber", houseNumber);
				String houseName = rs.getString("houseName");
				dict.put("houseName", houseName);
				String street = rs.getString("street");
				dict.put("street", street);
				String city = rs.getString("city");
				dict.put("city", city);
				String postcode = rs.getString("postcode");
				dict.put("postcode", postcode);
					
				result.add(dict);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return result;
		
	}
	
	/**
     * A method to delete a guest from the guest database. NOT TO BE USED,
     * it is used in the deletePerson method.
     *
     * @param String email, the persons email
     */
	public static void deleteGuest(String email) throws Exception {
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Guest WHERE email = '" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Guest " + email + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
		
	
	//This main method is just to demonstrate how everything works :)
	public static void main(String[] args) throws Exception {
	}
	
}
