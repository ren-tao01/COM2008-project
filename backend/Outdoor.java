package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Class with methods to manipulate Outdoor_Facility database.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Outdoor {

	//the statement to use the query as parameter
		static PreparedStatement stmt = null;
		//result set generated by statement
		static ResultSet rs = null;
		
		/**
	     * A method to add a person to the Outdoor_Facility database. This works with the Properties database, if the value is false
	     * it will update to true for having the facility
	     *
	     * @param int propertyID, the ID of the property
	     * @param boolean onRoadParking, if the property has onRoadParking
	     * @param boolean paidCarPark, if the property has a washing maching
	     * @param boolean patio, if the property has drier
	     * @param boolean barbeque, if the property has a fire extinguisher
	     * @param boolean freeOnSiteParking, if the property has a smoke alarm
	     * @param boolean firstAidKit, if the property has a first aid kit
	     */
		public static void addOutdoor(int propertyID, boolean onRoadParking, boolean paidCarPark, boolean patio, boolean barbeque,
				boolean freeOnSiteParking) throws Exception {
			
			if (!Properties.hasOutdoor(propertyID)) {
				Properties.editProperty(propertyID, "hasOutdoor", "1");;
			} else {
				Outdoor.deleteOutdoor(propertyID);
			}
			Connection con = DBAccess.connect();
			String query = "INSERT INTO Outdoor_Facility (propertyID,onRoadParking,paidCarPark,patio,barbeque,freeOnSiteParking) "
					+ "VALUES ('" + propertyID + "','" + toTinyInt(onRoadParking) + "','" + toTinyInt(paidCarPark) + "','" + toTinyInt(patio) + "','" + toTinyInt(barbeque) +
					"','" + toTinyInt(freeOnSiteParking) + "')";
			//Create statement with try-catch block
			try {
				stmt = con.prepareStatement(query);
				stmt.executeUpdate();
				System.out.println("Outdoor facilities have been added to property " + propertyID);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			
			DBAccess.disconnect();
		}
		
		/**
	     * A method to edit the details of an outdoor facility
	     *
	     * @param int property ID, the facilities property
	     * @param String columnName, the feature to be updated
	     * @param boolean newValue, the new value for the feature
	     */
		public static void editOutdoor(int propertyID, String columnName, boolean newValue) {
			
			Connection con = DBAccess.connect();
			String query = "UPDATE Outdoor_Facility SET " + columnName + "='" + toTinyInt(newValue) + "' WHERE propertyID ='" + propertyID + "'";
			//Create statement with try-catch block
			try {
				stmt = con.prepareStatement(query);
				stmt.executeUpdate();
				System.out.println("Property " + propertyID + "'s outdoor facility details " + columnName + " has been updated to " + newValue);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			DBAccess.disconnect();
		
		}
		
		/**
	     * A method for deleting a outdoor according to the property ID
	     *
	     * @param int propertyID, the IDs property
	     */
		public static void deleteOutdoor(int propertyID) throws Exception {
			
			Connection con = DBAccess.connect();
			String query = "DELETE FROM Outdoor_Facility WHERE propertyID = '" + propertyID + "'";
			//Create statement with try-catch block
			try {
				stmt = con.prepareStatement(query);
				stmt.executeUpdate();
				System.out.println("Outdoor Facilities for property " + propertyID + " deleted." );
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			DBAccess.disconnect();
		
		}
		
		/**
	     * A 'get' method for retrieving the full description of each outdoor in the database
		 * @return 
	     *
	     * @return boolean toReturn, true if property has central heating
	     */
		public static List<String> getAllOutdoor() {
			
			List<String> toReturn = new ArrayList<>();
			String query = "SELECT * FROM Outdoor_Facility";
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int ID = rs.getInt("propertyID");
					int onRoadParking = rs.getInt("onRoadParking");
					int paidCarPark = rs.getInt("paidCarPark");
					int patio = rs.getInt("patio");
					int barbeque = rs.getInt("barbeque");
					int freeOnSiteParking = rs.getInt("freeOnSiteParking");
					
					String toAdd = "Outdoor facilities for property " + ID + " are as follows: ";
					String onRoadParkingIncluded = "";
					if (onRoadParking == 1) {
						onRoadParkingIncluded = "On Road Parking Included";
					} else {
						onRoadParkingIncluded = "On Road Parking not Included";
					}
					String paidCarParkIncluded = "";
					if (paidCarPark == 1) {
						paidCarParkIncluded = "Paid Car Park Included";
					} else {
						paidCarParkIncluded = "Paid Car Park not Included";
					}
					String patioIncluded = "";
					if (patio == 1) {
						patioIncluded = "Patio Included";
					} else {
						patioIncluded = "Patio not Included";
					}
					String barbequeIncluded = "";
					if (barbeque == 1) {
						barbequeIncluded = "Barbeque Included";
					} else {
						barbequeIncluded = "Barbeque not Included";
					}
					String freeOnSiteParkingIncluded = "";
					if (freeOnSiteParking == 1) {
						freeOnSiteParkingIncluded = "Free On Site Parking Included";
					} else {
						freeOnSiteParkingIncluded = "Free On Site Parking Included";
					}
					toReturn.add(toAdd + onRoadParkingIncluded + ", " + paidCarParkIncluded + ", " + patioIncluded + ", " +
					barbequeIncluded + ", " + freeOnSiteParkingIncluded);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return toReturn;
		}
		
		/**
	     * A 'get' method for retrieving the full description a properties utilities in the database
	     *
	     *@param propertyID, the properties ID
	     * @return boolean toReturn, the string containing the description of a properties utilities
	     */
		public static String getOutdoor(int propertyID) {
			
			String toReturn = "";
			String query = "SELECT * FROM Outdoor_Facility WHERE propertyID = '" + propertyID + "'";
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int ID = rs.getInt("propertyID");
					int onRoadParking = rs.getInt("onRoadParking");
					int paidCarPark = rs.getInt("paidCarPark");
					int patio = rs.getInt("patio");
					int barbeque = rs.getInt("barbeque");
					int freeOnSiteParking = rs.getInt("freeOnSiteParking");
					
					String toAdd = "Outdoor facilities for property " + ID + " are as follows: ";
					String onRoadParkingIncluded = "";
					if (onRoadParking == 1) {
						onRoadParkingIncluded = "On Road Parking Included";
					} else {
						onRoadParkingIncluded = "On Road Parking not Included";
					}
					String paidCarParkIncluded = "";
					if (paidCarPark == 1) {
						paidCarParkIncluded = "Paid Car Park Included";
					} else {
						paidCarParkIncluded = "Paid Car Park not Included";
					}
					String patioIncluded = "";
					if (patio == 1) {
						patioIncluded = "Patio Included";
					} else {
						patioIncluded = "Patio not Included";
					}
					String barbequeIncluded = "";
					if (barbeque == 1) {
						barbequeIncluded = "Barbeque Included";
					} else {
						barbequeIncluded = "Barbeque not Included";
					}
					String freeOnSiteParkingIncluded = "";
					if (freeOnSiteParking == 1) {
						freeOnSiteParkingIncluded = "Free On Site Parking Included";
					} else {
						freeOnSiteParkingIncluded = "Free On Site Parking Included";
					}
					toReturn = toAdd + onRoadParkingIncluded + ", " + paidCarParkIncluded + ", " + patioIncluded + ", " +
					barbequeIncluded + ", " + freeOnSiteParkingIncluded;
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return toReturn;
		}
		
		/**
	     * A 'get' method for retrieving if the property has on road parking
	     *
	     * @param int propertyID, the properties specific ID
	     * @return boolean toReturn, true if property has on road parking
	     */
		public static boolean getOnRoadParking(int propertyID) {
			
			String query = "SELECT onRoadParking FROM Outdoor_Facility" + " WHERE propertyID = '" + propertyID + "'";;
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int hasOnRoadParking = rs.getInt("onRoadParking");
					return Properties.toBoolean(hasOnRoadParking);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return false;
			
		}
		
		/**
	     * A 'get' method for retrieving if the property has a paid car park
	     *
	     * @param int propertyID, the properties specific ID
	     * @return boolean toReturn, true if property has a paid car park
	     */
		public static boolean getPaidCarPark(int propertyID) {
			
			String query = "SELECT paidCarPark FROM Outdoor_Facility" + " WHERE propertyID = '" + propertyID + "'";;
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int has = rs.getInt("paidCarPark");
					return Properties.toBoolean(has);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return false;
			
		}
		
		/**
	     * A 'get' method for retrieving if the property has a patio
	     *
	     * @param int propertyID, the properties specific ID
	     * @return boolean toReturn, true if property has a patio
	     */
		public static boolean getPatio(int propertyID) {
			
			String query = "SELECT patio FROM Outdoor_Facility" + " WHERE propertyID = '" + propertyID + "'";;
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int has = rs.getInt("patio");
					return Properties.toBoolean(has);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return false;
			
		}
		
		/**
	     * A 'get' method for retrieving if the property has a barbeque
	     *
	     * @param int propertyID, the properties specific ID
	     * @return boolean toReturn, true if property has a barbeque
	     */
		public static boolean getBarbeque(int propertyID) {
			
			String query = "SELECT barbeque FROM Outdoor_Facility" + " WHERE propertyID = '" + propertyID + "'";;
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int has = rs.getInt("barbeque");
					return Properties.toBoolean(has);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return false;
			
		}
		
		/**
	     * A 'get' method for retrieving if the property has free on site parking
	     *
	     * @param int propertyID, the properties specific ID
	     * @return boolean toReturn, true if property has free on site parking
	     */
		public static boolean getFreeOnSiteParking(int propertyID) {
			
			String query = "SELECT freeOnSiteParking FROM Outdoor_Facility" + " WHERE propertyID = '" + propertyID + "'";;
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					int has = rs.getInt("freeOnSiteParking");
					return Properties.toBoolean(has);
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			
			DBAccess.disconnect();
			return false;
			
		}
		
		/**
	     * A method to change a boolean value to a tiny int, to avoid confusion when adding properties
	     *
	     * @param boolean i, the boolean to be converted
	     * @return toReturn, corresponding value of 1 (true) or 0 (false)
	     */
		public static int toTinyInt(boolean i) throws IllegalArgumentException {
			if (!(i == true || i == false)) {throw new IllegalArgumentException("Value must be true or false");}
			int toReturn = 0;
			if (i == true) {
				return 1;
			}
			return toReturn;
		}
		
		/**
	     * method to change an int to a boolean value, to avoid confusion again and to use in methods
	     *
	     * @param int i, to be converted
	     * @return toReturn, corresponding value of true (1) or false (0)
	     */
		public static boolean toBoolean(int i) throws IllegalArgumentException {
			if (!(i == 1 || i == 0)) {throw new IllegalArgumentException("Value must be 1 or 0");}
			boolean toReturn = false;
			if (i == 1) {
				return true;
			}
			return toReturn;
		}
}