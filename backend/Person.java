package backend;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Class for database manipulation of Person database.
 *
 * @version 1.0 23/11/21
 *
 * @author Team05
 *
 * Copyright (c) University of Sheffield 2021
 */

public class Person {

	//the statement to use the query as parameter
	static PreparedStatement stmt = null;
	//result set generated by statement
	static ResultSet rs = null;
	
	/**
     * A void method to print all persons
     */
	public static List<String> getPersons() {
		
		String query = "SELECT * FROM Person";
		Connection con = DBAccess.connect();
		List<String> toReturn = new ArrayList<>();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType").toUpperCase();
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				toReturn.add(ID);
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	
	
	/**
     * A 'get' method for retrieving account type of a person using their PK
     *
     * @param String email, the persons email
     * @return String accountType, the persons account type
     * @throws Illegal Argument Exception if a persons account type is not valid
     */
	public static String getAccountType(String email) throws IllegalArgumentException  {
		
		String query = "SELECT accountType FROM Person WHERE email = '" + email + "'";
		Connection con = DBAccess.connect();
		String accountType = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				accountType = rs.getString("accountType");
				return accountType;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		if (accountType == "") {
			throw new IllegalArgumentException("Account has no type - error");
		}
		DBAccess.disconnect();
		return accountType;
		
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getHostTitle(String hostID) {
		
		String query = "SELECT title FROM Person WHERE email = '" + hostID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("title");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getHostForname(String hostID) {
		
		String query = "SELECT forname FROM Person WHERE email = '" + hostID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("forname");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getHostSurname(String hostID) {
		
		String query = "SELECT surname FROM Person WHERE email = '" + hostID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("surname");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getHostMobileNumber(String hostID) {
		
		String query = "SELECT mobileNumber FROM Person WHERE email = '" + hostID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("mobileNumber");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A void 'get' kind of method for printing the persons what have a certain value in a column.
     * For example, if I wanted to retrieve persons with the first name "Dave" I would put
     * viewCertainProperties("forname", "Dave")
     *
     * @param String columnName, the feature you would like to search by
     * @param String columnValue, the corresponding value of the feature 
     */
	public static void viewCertainPersons(String columnName, String certainAssignment) {
		
		String query = "SELECT email, accountType, title, forname, surname, mobileNumber, password FROM Person WHERE " + columnName + "= '" + certainAssignment + "'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		try  {
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String ID = rs.getString("email");
				String title = rs.getString("title");
				String firstName = rs.getString("forname");
				String secondName = rs.getString("surname");
				String accountType = rs.getString("accountType");
				String mobileNumber = rs.getString("mobileNumber");
				String password = rs.getString("password");
				
				System.out.println("Showing persons where " + columnName + " is " + certainAssignment);
				System.out.println(accountType.toUpperCase() + " ID: " + ID + ", Name: " + title + " " + firstName + " " 
						+ secondName + ", " + "Mobile Number: " + mobileNumber + ", Password: " + password);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getGuestTitle(String guestID) {
		
		String query = "SELECT title FROM Person WHERE email = '" + guestID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("title");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getGuestForname(String guestID) {
		
		String query = "SELECT forname FROM Person WHERE email = '" + guestID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("forname");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getGuestSurname(String guestID) {
		
		String query = "SELECT surname FROM Person WHERE email = '" + guestID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("surname");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	/**
     * A 'get' method for receiving the hostID of a property using a propertyID
     *
     * @param int propertyID, the properties specific ID
     * @return String toReturn, the hostsID/email
     */
	public static String getGuestMobileNumber(String guestID) {
		
		String query = "SELECT mobileNumber FROM Person WHERE email = '" + guestID + "'";
		Connection con = DBAccess.connect();
		String toReturn = "";
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				String title = rs.getString("mobileNumber");
				toReturn = toReturn + title;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		
		DBAccess.disconnect();
		return toReturn;
	}
	
	
	/**
     * A method to add a person to the person database. This works with the Guest and Host
     * classes to automatically ass the person to the account types table
     *
     * @param String email, the persons email
     * @param String title, the title of the person
     * @param forname, the first name of the person
     * @param surname, the surname omf the person
     * @param accountType, the new persons account type
     */
	public static void addPerson(String email, String title, String forname, String surname, String accountType, String mobileNumber, String password) throws Exception {
		
		if (!(accountType.toUpperCase() == "HOST" || accountType.toUpperCase() == "GUEST")) {
			throw new IllegalArgumentException("Account type needs to be of type Host or Guest.");
		} else if (!email.contains("@")) {
			throw new IllegalArgumentException("Please enter a valid email address.");
		} else {
			Connection con = DBAccess.connect();
			String query = "INSERT INTO Person (email,accountType,title,forname,surname,mobileNumber,password) "
					+ "VALUES ('" + email + "','" + accountType.toUpperCase() + "','" + title + "','" + forname + "','" + surname + "','" + mobileNumber + "','" + password + "')";
			//Create statement with try-catch block
			try {
				stmt = con.prepareStatement(query);
				stmt.executeUpdate();
				System.out.println("Person " + email + " added.");
			} catch (SQLException e) {
				e.printStackTrace();
			}
			//This part automatically adds to the host/guest table when a guest account is made
			if (accountType.toUpperCase() == "GUEST") {
				Guest.addGuest(email);
			} else {
				Host.addHost(email);
			}
			
			
			DBAccess.disconnect();
		}
	}
	
	/**
     * A method for deleting a person according to their PK. This automatically deletes
     * them in their corresponding tables and if a host, deletes their properties.
     *
     * @param String email, the persons email
     */
	public static void deletePerson(String email) throws Exception {
		
		//This part automatically deletes from the host/guest table 
		if (getAccountType(email).equals("HOST")) {
			Host.deleteHost(email);
			Properties.deleteHostsProperties(email);
		} else {
			Guest.deleteGuest(email);
		}
		
		Connection con = DBAccess.connect();
		String query = "DELETE FROM Person WHERE email = '" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Person " + email + " deleted." );
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A method to edit the details of a person.
     *
     * @param String email, the persons email
     * @param String columnName, the feature to be updated
     * @param String newValue, the new value for the feature
     */
	public static void editPerson(String email, String columnName, String newValue) {
		
		Connection con = DBAccess.connect();
		String query = "UPDATE Person SET " + columnName + "='" + newValue + "' WHERE email ='" + email + "'";
		//Create statement with try-catch block
		try {
			stmt = con.prepareStatement(query);
			stmt.executeUpdate();
			System.out.println("Person " + email + "'s " + columnName + " has been updated to " + newValue);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		DBAccess.disconnect();
	
	}
	
	/**
     * A boolean method to check if a user exists
     * 
     * @param userID, the persons email
     */
	public static boolean userExists(String userID) {
		
		String query = "SELECT * FROM Person WHERE email = '" + userID + "'";
		Connection con = DBAccess.connect();
		//Create statement with try-catch block
		try  {
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			//means, whilst the result has another row
			while (rs.next()) {
				return true;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
			return false;
		}
		
		DBAccess.disconnect();
		
		return false;
	}
	
	/**
     * A boolean method to return true/false if an inputted username and password match
     *
     * @param String userID, the persons email
     * @return String password, the persons password
     * 
     */
	public static boolean login(String userID, String password) {
		
		if (userExists(userID)) {
			
			String query = "SELECT * FROM Person WHERE email = '" + userID + "' AND password = '" + password + "'";
			Connection con = DBAccess.connect();
			//Create statement with try-catch block
			try  {
				stmt = con.prepareStatement(query);
				rs = stmt.executeQuery();
				//means, whilst the result has another row
				while (rs.next()) {
					return true;
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
				System.out.println("Password Incorrect");
				return false;
			}
			
			DBAccess.disconnect();
		}
		
		System.out.println("User does not exist");
		return false;
		
	}
	
	public static void deleteAllPersons() {
		List<String> IDs = getPersons();
		for (int i=0; i<= getPersons().size(); i++) {
			try {
				deletePerson(IDs.get(i));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
		
	//This main method is just to demonstrate how everything works :)
	public static void main(String[] args) throws Exception {
		/*
		addPerson("@test.co.uk", "Mr", "Test", "Man", "HOST", "07958484745", "Test123");
		addPerson("@tester.co.uk", "Mr", "Test", "Man", "HOST", "07958484745", "Test123");
		System.out.println("@testa.co.uk exists?: " + Boolean.toString(userExists("@test.co.uk")));
		System.out.println("@testbigboi.co.uk exists?: " + Boolean.toString(userExists("@testbigboi.co.uk")));
		System.out.println("Logging in with user = @testa.co.uk and password = Test123 should be true = " + Boolean.toString(login("@test.co.uk", "Test123")));
		System.out.println("Logging in with user = @test.co.uk and password = Test1234 should be false = " + Boolean.toString(login("@test.co.uk", "Test1234")));
		getPersons();
		viewCertainPersons("email", "@testaer.co.uk");
		editPerson("@test.co.uk", "forname", "Newforname");
		getPersons();
		deletePerson("@test.co.uk");
		deletePerson("@tester.co.uk");
		addPerson("host1@test.co.uk", "Mr", "Test", "Man", "HOST", "07958484745", "Test123");
		addPerson("host2@test.co.uk", "Mrs", "Test", "Woman", "HOST", "07958486785", "Test12");
		addPerson("guest2@test.co.uk", "Mrs", "Test", "Woman", "GUEST", "07958486785", "Test12");
		addPerson("guest1@test.co.uk", "Mr", "Test", "Man", "GUEST", "07958484745", "Test123");
		Properties.addProperty("host1@test.co.uk", "Almighty Castle", "This is a castle on the edge of sheffield", 
				true, 1, "Castle De Sheff", "Rich Lane", "Sheffield", "S10 5PQ", true, false, true, false, false, false);
		Sleeping.addSleeping(1, true, true, false, false, true, false);
		Kitchen.addKitchen(1, true, true, true, true, true, true, true, true);
		Properties.addProperty("host1@test.co.uk", "Close to Almighty Castle", "This is another castle on the edge of sheffield with an outdoor space", 
				true, 1, "Castle Don Sheff", "Rich Lane", "Sheffield", "S10 5PX", true, false, true, false, false, true);
		Sleeping.addSleeping(2, true, true, false, false, true, false);
		Kitchen.addKitchen(2, true, true, true, true, true, true, true, true);
		Outdoor.addOutdoor(2, false, false, true, true, true);
		Properties.addProperty("host2@test.co.uk", "Small House", "This is a nice homely home in Sheffield city centre", 
				true, 1, "Smol Haus", "West Street", "Sheffield", "S1 5PS", true, false, true, true, true, false);
		Sleeping.addSleeping(3, true, true, false, false, true, false);
		Kitchen.addKitchen(3, true, true, true, true, true, true, true, true);
		Living.addLiving(3, true, true, true, true, true, true);
		Utility.addUtilities(3, true, true, true, true, true, true);
		*/
		Person.deleteAllPersons();
		Properties.deleteAllProperties();
		
		
		

	}
}
